<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="0">
        
        <!-- Dimensions Section - Core calculations -->
        <record id="section_dimensions" model="greenhouse.section.template">
            <field name="name">Basic Dimensions</field>
            <field name="code">dimensions</field>
            <field name="sequence">5</field>
            <field name="icon">fa-ruler</field>
            <field name="color">1</field>
            <field name="is_mandatory">True</field>
            <field name="requires_pipe">False</field>
            <field name="calculation_rules">[
                {
                    "code": "span_length",
                    "formula": "GET('total_span_length') - GET('width_front_span_coridoor', 0) - GET('width_back_span_coridoor', 0)"
                },
                {
                    "code": "bay_length", 
                    "formula": "GET('total_bay_length') - GET('width_front_bay_coridoor', 0) - GET('width_back_bay_coridoor', 0)"
                },
                {
                    "code": "structure_size",
                    "formula": "(GET('span_length') + GET('width_front_span_coridoor', 0) + GET('width_back_span_coridoor', 0)) * (GET('bay_length') + GET('width_front_bay_coridoor', 0) + GET('width_back_bay_coridoor', 0))"
                },
                {
                    "code": "no_of_spans",
                    "formula": "INT(GET('bay_length') / GET('span_width')) if GET('span_width') > 0 else 0"
                },
                {
                    "code": "no_of_bays",
                    "formula": "INT(GET('span_length') / GET('bay_width')) if GET('bay_width') > 0 else 0"
                },
                {
                    "code": "bottom_height",
                    "formula": "GET('column_height')"
                },
                {
                    "code": "arch_height",
                    "formula": "GET('top_ridge_height') - GET('column_height')"
                },
                {
                    "code": "gutter_length",
                    "formula": "GET('span_length')"
                }
            ]</field>
        </record>
        
    </data>
    
    <!-- USER CUSTOMIZABLE SECTIONS - Preserve user changes (noupdate="1") -->
    <data noupdate="1">
        
        <!-- Dimensions Input Fields -->
        <record id="section_dimensions_inputs" model="greenhouse.section.template">
            <field name="name">Basic Dimensions Inputs</field>
            <field name="code">dimensions_inputs</field>
            <field name="sequence">6</field>
            <field name="icon">fa-ruler</field>
            <field name="color">1</field>
            <field name="is_mandatory">True</field>
            <field name="requires_pipe">False</field>
            <field name="input_fields">[
                {
                    "code": "total_span_length",
                    "label": "Total Span Length (m)",
                    "type": "float",
                    "default": 100,
                    "min": 10,
                    "max": 500,
                    "sequence": 10,
                    "help": "Total length of the greenhouse in span direction"
                },
                {
                    "code": "total_bay_length",
                    "label": "Total Bay Length (m)",
                    "type": "float",
                    "default": 50,
                    "min": 10,
                    "max": 500,
                    "sequence": 20,
                    "help": "Total length of the greenhouse in bay direction"
                },
                {
                    "code": "span_width",
                    "label": "Span Width (m)",
                    "type": "float",
                    "default": 8,
                    "min": 4,
                    "max": 12,
                    "sequence": 30,
                    "help": "Width of each span"
                },
                {
                    "code": "bay_width",
                    "label": "Bay Width (m)",
                    "type": "float",
                    "default": 4,
                    "min": 3,
                    "max": 6,
                    "sequence": 40,
                    "help": "Width of each bay"
                },
                {
                    "code": "plot_size",
                    "label": "Plot Size",
                    "type": "text",
                    "default": "1 Acre",
                    "sequence": 50
                }
            ]</field>
        </record>
        
        <!-- Frame Section with Calculations -->
        <record id="section_frame" model="greenhouse.section.template">
            <field name="name">Frame Components</field>
            <field name="code">frame</field>
            <field name="sequence">20</field>
            <field name="icon">fa-columns</field>
            <field name="color">3</field>
            <field name="is_mandatory">True</field>
            <field name="requires_pipe">True</field>
            <field name="input_fields">[
                {
                    "code": "column_height",
                    "label": "Column Height (m)",
                    "type": "float",
                    "default": 4.5,
                    "min": 2.0,
                    "max": 10.0,
                    "sequence": 10
                },
                {
                    "code": "top_ridge_height",
                    "label": "Top Ridge Height (m)",
                    "type": "float",
                    "default": 6.5,
                    "min": 3.0,
                    "max": 15.0,
                    "sequence": 20
                },
                {
                    "code": "foundation_length",
                    "label": "Foundation Length (m)",
                    "type": "float",
                    "default": 0.5,
                    "min": 0,
                    "max": 2,
                    "sequence": 30
                },
                {
                    "code": "no_column_big_frame",
                    "label": "No of Big Column per Anchor Frame",
                    "type": "selection",
                    "options": ["0", "1", "2", "3"],
                    "default": "0",
                    "sequence": 40
                },
                {
                    "code": "no_anchor_frame_lines",
                    "label": "Number of Anchor Frame Lines",
                    "type": "integer",
                    "default": 0,
                    "min": 0,
                    "max": 10,
                    "sequence": 50
                },
                {
                    "code": "thick_column",
                    "label": "Thick Column Option",
                    "type": "selection",
                    "options": ["0", "1", "2", "3", "4"],
                    "default": "0",
                    "sequence": 60,
                    "options_labels": {
                        "0": "None",
                        "1": "4 Corners",
                        "2": "Both Bay Side",
                        "3": "Both Span Side",
                        "4": "All 4 Side"
                    }
                }
            ]</field>
            <field name="calculation_rules">[
                {
                    "code": "TOTAL_ANCHOR_FRAMES",
                    "name": "Total Anchor Frames",
                    "formula": "GET('no_anchor_frame_lines', 0) * GET('no_of_spans')",
                    "sequence": 10,
                    "length_per_unit": 0
                },
                {
                    "code": "TOTAL_NORMAL_FRAMES",
                    "name": "Total Normal Frames",
                    "formula": "(GET('no_of_spans') * (GET('no_of_bays') + 1)) - CALC('TOTAL_ANCHOR_FRAMES')",
                    "sequence": 20,
                    "length_per_unit": 0
                },
                {
                    "code": "MIDDLE_COLUMNS",
                    "name": "Middle Columns",
                    "formula": "CALC('TOTAL_ANCHOR_FRAMES') if INT(GET('no_column_big_frame')) in [1, 3] else 0",
                    "sequence": 30,
                    "length_per_unit": "GET('column_height') + GET('foundation_length')"
                },
                {
                    "code": "QUADRUPLE_COLUMNS",
                    "name": "Quadruple Columns",
                    "formula": "CALC('TOTAL_ANCHOR_FRAMES') * 2 if INT(GET('no_column_big_frame')) in [2, 3] else 0",
                    "sequence": 40,
                    "length_per_unit": "GET('column_height') + GET('foundation_length')"
                },
                {
                    "code": "THICK_COLUMNS",
                    "name": "Thick Columns",
                    "formula": "4 if GET('thick_column') == '1' else (GET('no_of_bays') + 1) * 2 if GET('thick_column') == '2' else (GET('no_of_spans') + 1) * 2 if GET('thick_column') == '3' else ((GET('no_of_bays') + 1) * 2) + ((GET('no_of_spans') + 1) * 2) if GET('thick_column') == '4' else 0",
                    "sequence": 50,
                    "length_per_unit": "GET('column_height') + GET('foundation_length')"
                },
                {
                    "code": "MAIN_COLUMNS",
                    "name": "Main Columns",
                    "formula": "((GET('no_of_spans') + 1) * (GET('no_of_bays') + 1)) - CALC('THICK_COLUMNS')",
                    "sequence": 60,
                    "length_per_unit": "GET('column_height') + GET('foundation_length')"
                }
            ]</field>
        </record>
        
        <!-- Truss Section with Calculations -->
        <record id="section_truss" model="greenhouse.section.template">
            <field name="name">Truss Components</field>
            <field name="code">truss</field>
            <field name="sequence">30</field>
            <field name="icon">fa-sitemap</field>
            <field name="color">4</field>
            <field name="is_mandatory">True</field>
            <field name="requires_pipe">True</field>
            <field name="input_fields">[
                {
                    "code": "big_arch_length",
                    "label": "Big Arch Length (m)",
                    "type": "float",
                    "default": 8.5,
                    "min": 5,
                    "max": 15,
                    "sequence": 10
                },
                {
                    "code": "small_arch_length",
                    "label": "Small Arch Length (m)",
                    "type": "float",
                    "default": 6.5,
                    "min": 4,
                    "max": 12,
                    "sequence": 20
                },
                {
                    "code": "is_bottom_chord",
                    "label": "Is Bottom Chord Required?",
                    "type": "boolean",
                    "default": false,
                    "sequence": 30
                },
                {
                    "code": "v_support_bottom_chord_frame",
                    "label": "V Support Bottom Chord per Frame",
                    "type": "selection",
                    "options": ["0", "2"],
                    "default": "0",
                    "sequence": 40
                },
                {
                    "code": "length_v_support_bottom_chord_frame",
                    "label": "Length for V Support Bottom Chord (m)",
                    "type": "float",
                    "default": 1.5,
                    "sequence": 50
                },
                {
                    "code": "no_vent_big_arch_support_frame",
                    "label": "Vent Support for Big Arch per Frame",
                    "type": "selection",
                    "options": ["0", "1", "2", "3"],
                    "default": "0",
                    "sequence": 60
                },
                {
                    "code": "length_vent_big_arch_support",
                    "label": "Length for Vent Support Big Arch (m)",
                    "type": "float",
                    "default": 2.0,
                    "sequence": 70
                },
                {
                    "code": "no_vent_small_arch_support_frame",
                    "label": "Vent Support for Small Arch per Frame",
                    "type": "selection",
                    "options": ["0", "2"],
                    "default": "0",
                    "sequence": 80
                },
                {
                    "code": "length_vent_small_arch_support",
                    "label": "Length for Vent Support Small Arch (m)",
                    "type": "float",
                    "default": 1.5,
                    "sequence": 90
                },
                {
                    "code": "bay_side_border_purlin",
                    "label": "Bay Side Border Purlin",
                    "type": "selection",
                    "options": ["0", "1", "2"],
                    "default": "0",
                    "sequence": 100
                },
                {
                    "code": "span_side_border_purlin",
                    "label": "Span Side Border Purlin",
                    "type": "selection",
                    "options": ["0", "1", "2"],
                    "default": "0",
                    "sequence": 110
                }
            ]</field>
            <field name="calculation_rules">[
                {
                    "code": "ARCH_BIG",
                    "name": "Big Arch",
                    "formula": "(GET('no_of_bays') + 1) * GET('no_of_spans')",
                    "sequence": 10,
                    "length_per_unit": "GET('big_arch_length')"
                },
                {
                    "code": "ARCH_SMALL",
                    "name": "Small Arch",
                    "formula": "CALC('ARCH_BIG')",
                    "sequence": 20,
                    "length_per_unit": "GET('small_arch_length')"
                },
                {
                    "code": "BOTTOM_CHORD_AF_NORMAL",
                    "name": "Bottom Chord AF Normal",
                    "formula": "CALC('TOTAL_ANCHOR_FRAMES') * (INT(GET('no_column_big_frame')) + 1) if GET('is_bottom_chord') and GET('span_width') &lt;= 6 else CALC('TOTAL_ANCHOR_FRAMES') if GET('is_bottom_chord') and INT(GET('no_column_big_frame')) == 0 else CALC('TOTAL_ANCHOR_FRAMES') * 2 if GET('is_bottom_chord') and INT(GET('no_column_big_frame')) == 1 else CALC('TOTAL_ANCHOR_FRAMES') * 3 if GET('is_bottom_chord') and INT(GET('no_column_big_frame')) == 2 else CALC('TOTAL_ANCHOR_FRAMES') * 4 if GET('is_bottom_chord') and INT(GET('no_column_big_frame')) == 3 else 0",
                    "sequence": 30,
                    "length_per_unit": "GET('span_width')"
                },
                {
                    "code": "BOTTOM_CHORD_AF_MALE",
                    "name": "Bottom Chord AF Male",
                    "formula": "CALC('TOTAL_ANCHOR_FRAMES') if GET('is_bottom_chord') and GET('span_width') &gt; 6 and GET('no_column_big_frame') == '0' else 0",
                    "sequence": 40,
                    "length_per_unit": "GET('span_width') / 2"
                },
                {
                    "code": "BOTTOM_CHORD_AF_FEMALE",
                    "name": "Bottom Chord AF Female",
                    "formula": "CALC('BOTTOM_CHORD_AF_MALE')",
                    "sequence": 50,
                    "length_per_unit": "GET('span_width') / 2"
                },
                {
                    "code": "BOTTOM_CHORD_IL_NORMAL",
                    "name": "Bottom Chord IL Normal",
                    "formula": "CALC('TOTAL_NORMAL_FRAMES') if GET('is_bottom_chord') and GET('span_width') &lt;= 6 else 0",
                    "sequence": 60,
                    "length_per_unit": "GET('span_width')"
                },
                {
                    "code": "BOTTOM_CHORD_IL_MALE",
                    "name": "Bottom Chord IL Male",
                    "formula": "CALC('TOTAL_NORMAL_FRAMES') if GET('is_bottom_chord') and GET('span_width') &gt; 6 else 0",
                    "sequence": 70,
                    "length_per_unit": "GET('span_width') / 2"
                },
                {
                    "code": "BOTTOM_CHORD_IL_FEMALE",
                    "name": "Bottom Chord IL Female",
                    "formula": "CALC('BOTTOM_CHORD_IL_MALE')",
                    "sequence": 80,
                    "length_per_unit": "GET('span_width') / 2"
                },
                {
                    "code": "V_SUPPORT_BOTTOM_CHORD",
                    "name": "V Support Bottom Chord",
                    "formula": "INT(GET('v_support_bottom_chord_frame')) * CALC('TOTAL_NORMAL_FRAMES')",
                    "sequence": 90,
                    "length_per_unit": "GET('length_v_support_bottom_chord_frame', 1.5)"
                },
                {
                    "code": "ARCH_SUPPORT_STRAIGHT_MIDDLE",
                    "name": "Arch Support Straight Middle",
                    "formula": "CALC('ARCH_BIG') - CALC('TOTAL_ANCHOR_FRAMES') if GET('is_bottom_chord') else 0",
                    "sequence": 100,
                    "length_per_unit": "GET('span_width') / 2"
                },
                {
                    "code": "VENT_BIG_ARCH_SUPPORT",
                    "name": "Vent Big Arch Support",
                    "formula": "CALC('ARCH_BIG') * INT(GET('no_vent_big_arch_support_frame'))",
                    "sequence": 110,
                    "length_per_unit": "GET('length_vent_big_arch_support', 2.0)"
                },
                {
                    "code": "VENT_SMALL_ARCH_SUPPORT",
                    "name": "Vent Small Arch Support",
                    "formula": "GET('no_of_bays') * GET('no_of_spans') * INT(GET('no_vent_small_arch_support_frame'))",
                    "sequence": 120,
                    "length_per_unit": "GET('length_vent_small_arch_support', 1.5)"
                },
                {
                    "code": "BIG_ARCH_PURLIN",
                    "name": "Big Arch Purlin",
                    "formula": "GET('no_of_bays') * GET('no_of_spans')",
                    "sequence": 130,
                    "length_per_unit": "GET('span_width')"
                },
                {
                    "code": "SMALL_ARCH_PURLIN",
                    "name": "Small Arch Purlin",
                    "formula": "CALC('BIG_ARCH_PURLIN')",
                    "sequence": 140,
                    "length_per_unit": "GET('span_width')"
                },
                {
                    "code": "GABLE_PURLIN",
                    "name": "Gable Purlin",
                    "formula": "0 if GET('last_span_gutter') else GET('no_of_bays') * 2",
                    "sequence": 150,
                    "length_per_unit": "GET('span_width')"
                }
            ]</field>
        </record>
        
        <!-- ASC Section -->
        <record id="section_asc" model="greenhouse.section.template">
            <field name="name">ASC (Aerodynamic Side Corridors)</field>
            <field name="code">asc</field>
            <field name="sequence">10</field>
            <field name="icon">fa-arrows-h</field>
            <field name="color">2</field>
            <field name="is_mandatory">False</field>
            <field name="requires_pipe">True</field>
            <field name="input_fields">[
                {
                    "code": "is_side_coridoors",
                    "label": "Enable ASC",
                    "type": "boolean",
                    "default": false,
                    "sequence": 10
                },
                {
                    "code": "width_front_span_coridoor",
                    "label": "Width Front Span ASC (m)",
                    "type": "float",
                    "default": 0,
                    "min": 0,
                    "max": 10,
                    "sequence": 20
                },
                {
                    "code": "width_back_span_coridoor",
                    "label": "Width Back Span ASC (m)",
                    "type": "float",
                    "default": 0,
                    "min": 0,
                    "max": 10,
                    "sequence": 30
                },
                {
                    "code": "width_front_bay_coridoor",
                    "label": "Width Left Bay ASC (m)",
                    "type": "float",
                    "default": 0,
                    "min": 0,
                    "max": 10,
                    "sequence": 40
                },
                {
                    "code": "width_back_bay_coridoor",
                    "label": "Width Right Bay ASC (m)",
                    "type": "float",
                    "default": 0,
                    "min": 0,
                    "max": 10,
                    "sequence": 50
                },
                {
                    "code": "support_hockeys",
                    "label": "Support per Hockey",
                    "type": "integer",
                    "default": 0,
                    "min": 0,
                    "max": 10,
                    "sequence": 60
                },
                {
                    "code": "length_support_hockeys",
                    "label": "Length for Support Hockey (m)",
                    "type": "float",
                    "default": 1.5,
                    "sequence": 70
                }
            ]</field>
            <field name="calculation_rules">[
                {
                    "code": "FRONT_SPAN_HOCKEYS",
                    "name": "Front Span Hockeys",
                    "formula": "((GET('bay_length') / GET('span_width')) * (INT(GET('no_column_big_frame')) + 1) + 1) if GET('width_front_span_coridoor', 0) &gt; 0 else 0",
                    "sequence": 10,
                    "length_per_unit": "GET('width_front_span_coridoor', 0)"
                },
                {
                    "code": "BACK_SPAN_HOCKEYS",
                    "name": "Back Span Hockeys",
                    "formula": "((GET('bay_length') / GET('span_width')) * (INT(GET('no_column_big_frame')) + 1) + 1) if GET('width_back_span_coridoor', 0) &gt; 0 else 0",
                    "sequence": 20,
                    "length_per_unit": "GET('width_back_span_coridoor', 0)"
                },
                {
                    "code": "FRONT_BAY_HOCKEYS",
                    "name": "Front Bay Hockeys",
                    "formula": "(GET('span_length') / GET('bay_width') + 1) if GET('width_front_bay_coridoor', 0) &gt; 0 else 0",
                    "sequence": 30,
                    "length_per_unit": "GET('width_front_bay_coridoor', 0)"
                },
                {
                    "code": "BACK_BAY_HOCKEYS",
                    "name": "Back Bay Hockeys",
                    "formula": "(GET('span_length') / GET('bay_width') + 1) if GET('width_back_bay_coridoor', 0) &gt; 0 else 0",
                    "sequence": 40,
                    "length_per_unit": "GET('width_back_bay_coridoor', 0)"
                },
                {
                    "code": "TOTAL_HOCKEYS",
                    "name": "Total Hockeys",
                    "formula": "CALC('FRONT_SPAN_HOCKEYS') + CALC('BACK_SPAN_HOCKEYS') + CALC('FRONT_BAY_HOCKEYS') + CALC('BACK_BAY_HOCKEYS')",
                    "sequence": 50,
                    "length_per_unit": 0
                },
                {
                    "code": "HOCKEY_SUPPORTS",
                    "name": "Hockey Supports",
                    "formula": "CALC('TOTAL_HOCKEYS') * GET('support_hockeys', 0)",
                    "sequence": 60,
                    "length_per_unit": "GET('length_support_hockeys', 1.5)"
                }
            ]</field>
        </record>
        
        <!-- Side Screen Section -->
        <record id="section_side_screen" model="greenhouse.section.template">
            <field name="name">Side Screen Components</field>
            <field name="code">side_screen</field>
            <field name="sequence">40</field>
            <field name="icon">fa-shield</field>
            <field name="color">5</field>
            <field name="is_mandatory">False</field>
            <field name="requires_pipe">True</field>
            <field name="input_fields">[
                {
                    "code": "side_screen_guard",
                    "label": "Side Screen Guard",
                    "type": "boolean",
                    "default": false,
                    "sequence": 10
                },
                {
                    "code": "length_side_screen_guard",
                    "label": "Length for Side Screen Guard (m)",
                    "type": "float",
                    "default": 1.0,
                    "sequence": 20
                },
                {
                    "code": "side_screen_guard_box",
                    "label": "Side Screen Guard Box",
                    "type": "boolean",
                    "default": false,
                    "sequence": 30
                },
                {
                    "code": "no_side_screen_guard_box",
                    "label": "Number of Side Screen Guard Box",
                    "type": "integer",
                    "default": 0,
                    "min": 0,
                    "max": 20,
                    "sequence": 40
                },
                {
                    "code": "no_of_curtains",
                    "label": "No of Curtains",
                    "type": "integer",
                    "default": 0,
                    "min": 0,
                    "max": 20,
                    "sequence": 50
                }
            ]</field>
            <field name="calculation_rules">[
                {
                    "code": "SIDE_SCREEN_ROLL_UP_PIPE",
                    "name": "Side Screen Roll Up Pipe",
                    "formula": "CEIL((GET('bay_length') / 5.95) * 2) + CEIL((GET('span_length') / 5.95) * 2) if GET('side_screen_guard') or GET('side_screen_guard_box') else 0",
                    "sequence": 10,
                    "length_per_unit": 5.95
                },
                {
                    "code": "SIDE_SCREEN_ROLL_UP_PIPE_JOINER",
                    "name": "Side Screen Roll Up Pipe Joiner",
                    "formula": "CALC('SIDE_SCREEN_ROLL_UP_PIPE') - 4 if CALC('SIDE_SCREEN_ROLL_UP_PIPE') &gt; 0 else 0",
                    "sequence": 20,
                    "length_per_unit": 0.5
                },
                {
                    "code": "SIDE_SCREEN_GUARD",
                    "name": "Side Screen Guard",
                    "formula": "CALC('TOTAL_HOCKEYS') if GET('side_screen_guard') and CALC('TOTAL_HOCKEYS') &gt; 0 else ((GET('no_of_spans') + 1) * (GET('no_of_bays') + 1)) if GET('side_screen_guard') else 0",
                    "sequence": 30,
                    "length_per_unit": "GET('length_side_screen_guard', 1.0)"
                },
                {
                    "code": "SIDE_SCREEN_GUARD_BOX_PIPE",
                    "name": "Side Screen Guard Box Pipe",
                    "formula": "GET('no_side_screen_guard_box', 0) * 2 if GET('no_side_screen_guard_box', 0) &gt; 0 else 0",
                    "sequence": 40,
                    "length_per_unit": 1.0
                },
                {
                    "code": "SIDE_SCREEN_GUARD_BOX_H_PIPE",
                    "name": "Side Screen Guard Box H Pipe",
                    "formula": "CALC('SIDE_SCREEN_GUARD_BOX_PIPE')",
                    "sequence": 50,
                    "length_per_unit": 1.0
                },
                {
                    "code": "SIDE_SCREEN_GUARD_SPACER",
                    "name": "Side Screen Guard Spacer",
                    "formula": "(CALC('SIDE_SCREEN_GUARD') * 2) + (GET('no_side_screen_guard_box', 0) * 4)",
                    "sequence": 60,
                    "length_per_unit": 0.3
                },
                {
                    "code": "SIDE_SCREEN_ROLLUP_HANDLES",
                    "name": "Side Screen Rollup Handles",
                    "formula": "GET('no_of_curtains', 0)",
                    "sequence": 70,
                    "length_per_unit": 1.0
                }
            ]</field>
        </record>
        
        <!-- Lower Section -->
        <record id="section_lower" model="greenhouse.section.template">
            <field name="name">Lower Section Components</field>
            <field name="code">lower</field>
            <field name="sequence">50</field>
            <field name="icon">fa-level-down</field>
            <field name="color">6</field>
            <field name="is_mandatory">False</field>
            <field name="requires_pipe">True</field>
            <field name="input_fields">[
                {
                    "code": "front_back_c_c_cross_bracing_x",
                    "label": "Front and Back CC Cross Bracing X",
                    "type": "boolean",
                    "default": false,
                    "sequence": 10
                },
                {
                    "code": "middle_c_c_cross_bracing_x",
                    "label": "No of Internal CC Cross Bracing X Lines",
                    "type": "integer",
                    "default": 0,
                    "min": 0,
                    "max": 10,
                    "sequence": 20
                },
                {
                    "code": "cross_bracing_column_arch",
                    "label": "Cross Bracing Column to Arch",
                    "type": "boolean",
                    "default": false,
                    "sequence": 30
                },
                {
                    "code": "cross_bracing_column_bottom",
                    "label": "Cross Bracing Column to Bottom Chord",
                    "type": "boolean",
                    "default": false,
                    "sequence": 40
                },
                {
                    "code": "arch_middle_purlin_big_arch",
                    "label": "Arch Middle Purlin Big Arch",
                    "type": "selection",
                    "options": ["0", "1", "2", "3", "4", "5"],
                    "default": "0",
                    "sequence": 50
                },
                {
                    "code": "arch_middle_purlin_big_arch_pcs",
                    "label": "Arch Middle Purlin Big Arch Pcs",
                    "type": "selection",
                    "options": ["0", "1", "2"],
                    "default": "0",
                    "sequence": 60
                },
                {
                    "code": "arch_middle_purlin_small_arch",
                    "label": "Arch Middle Purlin Small Arch",
                    "type": "selection",
                    "options": ["0", "1", "2", "3", "4", "5"],
                    "default": "0",
                    "sequence": 70
                },
                {
                    "code": "arch_middle_purlin_small_arch_pcs",
                    "label": "Arch Middle Purlin Small Arch Pcs",
                    "type": "selection",
                    "options": ["0", "1", "2"],
                    "default": "0",
                    "sequence": 80
                }
            ]</field>
            <field name="calculation_rules">[
                {
                    "code": "FRONT_BACK_CC_CROSS_BRACING_X",
                    "name": "Front Back CC Cross Bracing X",
                    "formula": "INT(GET('front_back_c_c_cross_bracing_x')) * (GET('no_of_spans') + 1) * 4",
                    "sequence": 10,
                    "length_per_unit": 2.5
                },
                {
                    "code": "MIDDLE_CC_CROSS_BRACING_X",
                    "name": "Middle CC Cross Bracing X",
                    "formula": "GET('middle_c_c_cross_bracing_x', 0) * (GET('no_of_spans') + 1) * 2",
                    "sequence": 20,
                    "length_per_unit": 2.5
                },
                {
                    "code": "CROSS_BRACING_COLUMN_ARCH",
                    "name": "Cross Bracing Column Arch",
                    "formula": "INT(GET('cross_bracing_column_arch')) * (GET('no_of_spans') * 4)",
                    "sequence": 30,
                    "length_per_unit": 2.0
                },
                {
                    "code": "CROSS_BRACING_COLUMN_BOTTOM",
                    "name": "Cross Bracing Column Bottom",
                    "formula": "INT(GET('cross_bracing_column_bottom')) * (GET('no_of_spans') * 4)",
                    "sequence": 40,
                    "length_per_unit": 2.0
                },
                {
                    "code": "ARCH_MIDDLE_PURLIN_BIG_ARCH",
                    "name": "Arch Middle Purlin Big Arch",
                    "formula": "INT(GET('arch_middle_purlin_big_arch_pcs')) * (4 if GET('arch_middle_purlin_big_arch') == '1' else GET('no_of_spans') * 2 if GET('arch_middle_purlin_big_arch') == '2' else GET('no_of_bays') * 2 if GET('arch_middle_purlin_big_arch') == '3' else (GET('no_of_spans') * 2 + GET('no_of_bays') * 2 - 4) if GET('arch_middle_purlin_big_arch') == '4' else GET('no_of_spans') * GET('no_of_bays') if GET('arch_middle_purlin_big_arch') == '5' else 0)",
                    "sequence": 50,
                    "length_per_unit": "GET('span_width')"
                },
                {
                    "code": "ARCH_MIDDLE_PURLIN_SMALL_ARCH",
                    "name": "Arch Middle Purlin Small Arch",
                    "formula": "INT(GET('arch_middle_purlin_small_arch_pcs')) * (4 if GET('arch_middle_purlin_small_arch') == '1' else GET('no_of_spans') * 2 if GET('arch_middle_purlin_small_arch') == '2' else GET('no_of_bays') * 2 if GET('arch_middle_purlin_small_arch') == '3' else (GET('no_of_spans') * 2 + GET('no_of_bays') * 2 - 4) if GET('arch_middle_purlin_small_arch') == '4' else GET('no_of_spans') * GET('no_of_bays') if GET('arch_middle_purlin_small_arch') == '5' else 0)",
                    "sequence": 60,
                    "length_per_unit": "GET('span_width')"
                },
                {
                    "code": "BAY_SIDE_BORDER_PURLIN",
                    "name": "Bay Side Border Purlin",
                    "formula": "INT(GET('bay_side_border_purlin')) * (GET('no_of_bays') * 2 if CALC('TOTAL_HOCKEYS') == 0 else (CALC('FRONT_BAY_HOCKEYS') - 1 if CALC('FRONT_BAY_HOCKEYS') &gt; 0 else GET('no_of_bays')) + (CALC('BACK_BAY_HOCKEYS') - 1 if CALC('BACK_BAY_HOCKEYS') &gt; 0 else GET('no_of_bays')))",
                    "sequence": 70,
                    "length_per_unit": "GET('bay_width')"
                },
                {
                    "code": "SPAN_SIDE_BORDER_PURLIN",
                    "name": "Span Side Border Purlin",
                    "formula": "INT(GET('span_side_border_purlin')) * (GET('no_of_spans') * (INT(GET('no_column_big_frame')) + 1) * 2 if CALC('TOTAL_HOCKEYS') == 0 else (CALC('FRONT_SPAN_HOCKEYS') - 1 if CALC('FRONT_SPAN_HOCKEYS') &gt; 0 else GET('no_of_spans') * (INT(GET('no_column_big_frame')) + 1)) + (CALC('BACK_SPAN_HOCKEYS') - 1 if CALC('BACK_SPAN_HOCKEYS') &gt; 0 else GET('no_of_spans') * (INT(GET('no_column_big_frame')) + 1)))",
                    "sequence": 80,
                    "length_per_unit": "GET('span_width')"
                }
            ]</field>
        </record>
        
        <!-- Gutter Section -->
        <record id="section_gutter" model="greenhouse.section.template">
            <field name="name">Gutter System</field>
            <field name="code">gutter</field>
            <field name="sequence">60</field>
            <field name="icon">fa-tint</field>
            <field name="color">7</field>
            <field name="is_mandatory">False</field>
            <field name="requires_pipe">True</field>
            <field name="input_fields">[
                {
                    "code": "gutter_type",
                    "label": "Gutter Type",
                    "type": "selection",
                    "options": ["none", "ippf", "continuous"],
                    "default": "none",
                    "sequence": 10
                },
                {
                    "code": "gutter_slope",
                    "label": "Gutter Slope",
                    "type": "selection",
                    "options": ["1", "2"],
                    "default": "1",
                    "sequence": 20
                },
                {
                    "code": "last_span_gutter",
                    "label": "Last Span Gutter",
                    "type": "boolean",
                    "default": false,
                    "sequence": 30
                },
                {
                    "code": "gutter_ippf_full",
                    "label": "Gutter IPPF Full",
                    "type": "boolean",
                    "default": false,
                    "sequence": 40
                },
                {
                    "code": "gutter_ippf_drainage_extension",
                    "label": "Gutter IPPF Drainage Extension",
                    "type": "boolean",
                    "default": false,
                    "sequence": 50
                },
                {
                    "code": "gutter_funnel_ippf",
                    "label": "Gutter Funnel IPPF",
                    "type": "boolean",
                    "default": false,
                    "sequence": 60
                },
                {
                    "code": "gutter_end_cap",
                    "label": "Gutter End Cap",
                    "type": "boolean",
                    "default": false,
                    "sequence": 70
                },
                {
                    "code": "gutter_extension",
                    "label": "Gutter Extension",
                    "type": "selection",
                    "options": ["0", "2", "4"],
                    "default": "0",
                    "sequence": 80
                }
            ]</field>
            <field name="calculation_rules">[
                {
                    "code": "GUTTER_IPPF_FULL",
                    "name": "Gutter IPPF Full",
                    "formula": "(GET('no_of_spans') + 1 if GET('last_span_gutter') else GET('no_of_spans') - 1) * GET('no_of_bays') if GET('gutter_ippf_full') else 0",
                    "sequence": 10,
                    "length_per_unit": "GET('bay_width')"
                },
                {
                    "code": "GUTTER_IPPF_DRAINAGE_EXT",
                    "name": "Gutter IPPF Drainage Extension",
                    "formula": "(GET('no_of_spans') + 1 if GET('last_span_gutter') else GET('no_of_spans') - 1) * INT(GET('gutter_slope')) if GET('gutter_ippf_drainage_extension') else 0",
                    "sequence": 20,
                    "length_per_unit": 1.0
                },
                {
                    "code": "GUTTER_FUNNEL_IPPF",
                    "name": "Gutter Funnel IPPF",
                    "formula": "(GET('no_of_spans') + 1 if GET('last_span_gutter') else GET('no_of_spans') - 1) * INT(GET('gutter_slope')) if GET('gutter_funnel_ippf') else 0",
                    "sequence": 30,
                    "length_per_unit": 0
                },
                {
                    "code": "GUTTER_END_CAP",
                    "name": "Gutter End Cap",
                    "formula": "(GET('no_of_spans') + 1 if GET('last_span_gutter') else GET('no_of_spans') - 1) if GET('gutter_end_cap') and GET('gutter_funnel_ippf') and INT(GET('gutter_slope')) == 1 else 0",
                    "sequence": 40,
                    "length_per_unit": 0
                },
                {
                    "code": "GUTTERS_CONTINUOUS",
                    "name": "Gutters Continuous",
                    "formula": "GET('no_of_spans') - 1 if GET('gutter_type') == 'continuous' else 0",
                    "sequence": 50,
                    "length_per_unit": "GET('span_length')"
                },
                {
                    "code": "GUTTER_PURLIN_CONTINUOUS",
                    "name": "Gutter Purlin Continuous",
                    "formula": "(GET('no_of_spans') - 1) * GET('no_of_bays') * 2 if GET('gutter_type') == 'continuous' else 0",
                    "sequence": 60,
                    "length_per_unit": "GET('bay_width')"
                },
                {
                    "code": "GUTTER_PURLIN_EXTENSION",
                    "name": "Gutter Purlin Extension",
                    "formula": "(GET('no_of_spans') - 1) * 4 if GET('gutter_type') == 'continuous' and INT(GET('gutter_extension', 0)) &gt; 0 else 0",
                    "sequence": 70,
                    "length_per_unit": "INT(GET('gutter_extension', 0))"
                }
            ]</field>
        </record>
        
    </data>
</odoo>